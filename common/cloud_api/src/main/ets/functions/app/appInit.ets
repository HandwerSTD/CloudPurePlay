import { AppUtil, LogUtil, ToastUtil } from "@pura/harmony-utils"
import { Song, Song_INITIAL } from "../../entities/Song"
import PlayQueueUtils from "../../common/utils/play/PlayQueueUtils"
import PreferencesUtils from "../../common/utils/data/PreferencesUtils"
import { StorageConstants } from "../../constants/StorageConstants"
import { notificationManager } from "@kit.NotificationKit"
import { resourceManager } from "@kit.LocalizationKit"
import { initSettings } from "./settings"
import { getLoginStatus } from "../../api/loginApi"
import { PlayingPlayList, PlayList } from "../../entities/PlayList"
import { getLikeList } from "../../api/songApi"
import RelationalStoreUtils from "../../common/utils/data/RelationalStoreUtils"
import AudioCacheUtils from "../../common/utils/play/AudioCacheUtils"
import { Album } from "../../entities/Album"
import { checkValidUrl } from "../common/get"
import DownloadUtils from "../../common/utils/file/DownloadUtils"
import { DjRadio } from "../../entities/DjRadio"
import { PersonalListItem, TopListItem } from "../../entities/Recommend"
import promptAction from "@ohos.promptAction"
import { preferences } from "@kit.ArkData"

/**
 * App初始化
 */
const TAG = 'AppInit'

// export async function appInit() {
//   AppStorage.setOrCreate(StorageConstants.APP_LOADING, true)
//   await initSettings()
//   initApp()
//   await initLists()
//   loadSavedSong()
//   initPermission()
//   initLocalData()
//   let validApi = await checkValidUrl()
//   if(validApi) {
//     await initUserInfo()
//   }
//   AppStorage.setOrCreate(StorageConstants.APP_LOADING, false)
// }

function initApp() {
  AudioCacheUtils.init()
  ToastUtil.setDefaultConfig((config) => {
    config.duration = 2000
    config.duration_short = 1000
    config.duration_long = 5000
    config.showMode = promptAction.ToastShowMode.DEFAULT
    config.textColor = $r('app.color.reverse')
    config.backgroundColor = $r('app.color.main')
    config.backgroundBlurStyle = BlurStyle.Thin
    config.shadow = ShadowStyle.OUTER_DEFAULT_XS
  })
}

async function initPermission() {
  notificationManager.requestEnableNotification(AppUtil.getContext()).then(() => {
  })
}

export async function initUserInfo(cookie: string, userStatePersistent: (val: preferences.ValueType) => void) {
  let isLogged = await getLoginStatus(userStatePersistent)
  if(!isLogged && cookie) {
    ToastUtil.showToast('登录状态失效')
  } else {
    getLikeList()
  }
}

// async function initLocalData() {
//   RelationalStoreUtils.init()
//
//   let userLikeList: string[] = []
//   AppStorage.setOrCreate(StorageConstants.USER_LIKELIST, userLikeList)
//   const playInfo: PlayingPlayList = {
//     id: -1,
//     count: -1
//   }
//   AppStorage.setOrCreate(StorageConstants.LAST_PLAYED_LIST, playInfo)
//
//   const results = await Promise.all([
//     getDeviceTypeInfo(),
//     PreferencesUtils.getPreferenceValue<PlayList[]>(StorageConstants.USER_PREF, StorageConstants.USER_PLAYLISTS, []),
//     PreferencesUtils.getPreferenceValue<TopListItem[]>(StorageConstants.USER_PREF, StorageConstants.TOPLISTS, []),
//     PreferencesUtils.getPreferenceValue<PersonalListItem[]>(StorageConstants.USER_PREF, StorageConstants.PERSONALIZED_LIST, []),
//     PreferencesUtils.getPreferenceValue<string[]>(StorageConstants.USER_PREF, StorageConstants.SEARCH_HISTORY, []),
//     PreferencesUtils.getPreferenceValue<Album[]>(StorageConstants.USER_PREF, StorageConstants.USER_SUB_ALBUM, []),
//     PreferencesUtils.getPreferenceValue<DjRadio[]>(StorageConstants.USER_PREF, StorageConstants.USER_DJRADIO_LIST, [])
//   ])
//
//   AppStorage.setOrCreate(StorageConstants.DEVICE_TYPE, results[0])
//   AppStorage.setOrCreate(StorageConstants.USER_PLAYLISTS, results[1])
//   AppStorage.setOrCreate(StorageConstants.TOPLISTS, results[2])
//   AppStorage.setOrCreate(StorageConstants.PERSONALIZED_LIST, results[3])
//   AppStorage.setOrCreate(StorageConstants.SEARCH_HISTORY, results[4])
//   AppStorage.setOrCreate(StorageConstants.USER_SUB_ALBUM, results[5])
//   AppStorage.setOrCreate(StorageConstants.USER_DJRADIO_LIST, results[6])
// }

/**
 * 初始化列表
 */
async function initLists() {
  await PlayQueueUtils.init()
  DownloadUtils.init()
}

/**
 * 加载上一次的播放内容
 */
// async function loadSavedSong() {
//   let has = await PreferencesUtils.getPreferenceValue<boolean>('Play','hasCurrentSong', false)
//   let song: Song = {
//     id: 0,
//     name: "暂无播放",
//     artists: [],
//     album: {
//       id: 0,
//       name: '',
//       picUrl: '',
//       artists: [],
//       size: 0
//     },
//     duration: 0,
//     alias: [],
//     fee: 0
//   }
//   let artists = '选择一首歌曲播放吧'
//   let picUrl: string = ''
//   let playMode: number = 0
//
//   if(has) {
//     song = await PreferencesUtils.getPreferenceValue<Song>('Play', 'CurrentSong', Song_INITIAL)
//     playMode = await PreferencesUtils.getPreferenceValue<number>('Play', 'PlayMode', 1)
//     artists = await PreferencesUtils.getPreferenceValue<string>('Play', 'CurrentArtists', '')
//     picUrl = await PreferencesUtils.getPreferenceValue<string>('Play', 'CurrentImage', '')
//     let currentIndex = await PreferencesUtils.getPreferenceValue<number>('Play', 'CurrentQueueIndex', 0)
//     await PlayQueueUtils.setIndex(currentIndex)
//   }
//   AppStorage.setOrCreate(StorageConstants.PLAY_MODE, playMode)
//   AppStorage.setOrCreate(StorageConstants.PLAY_SONG, song)
//   AppStorage.setOrCreate(StorageConstants.PLAY_ARTISTS, artists)
//   AppStorage.setOrCreate(StorageConstants.PIC_URL, picUrl)
// }
